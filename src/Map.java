
import java.awt.Color;
import java.io.IOException;
import static java.lang.Math.abs;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JDialog;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author ralleg
 */
public class Map extends javax.swing.JFrame {

    private int TURN = 0;
    private char[][] game;
    private final JButton[] Buttons;
    private char[] sudo = {'x', 'o'};
    private Icon[] img;

    /**
     * Creates new form Map
     */
    public Map() {
        this.game = new char[3][3];
        try {
            img=new Icon[]{new ImageIcon(ImageIO.read(getClass().getResource("resources/x.png")).getScaledInstance(75, 75, java.awt.Image.SCALE_SMOOTH)),
            new ImageIcon(ImageIO.read(getClass().getResource("resources/o.png")).getScaledInstance(75, 75, java.awt.Image.SCALE_SMOOTH))};
        } catch (IOException ex) {
            Logger.getLogger(Map.class.getName()).log(Level.SEVERE, null, ex);
        }
        initComponents();
        this.Buttons = new JButton[]{Pos00, Pos01, Pos02, Pos10, Pos11, Pos12, Pos20, Pos21, Pos22};
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                Buttons[3 * i + j].setName("" + i + j);//If it looks stupid, but it works, it's not stupid.
            }
        }
    }

    /**
     *
     */
    public void restart() {
        game = new char[3][3];//Resets the matrix
        for (JButton b : Buttons) {
            b.setEnabled(true);//Enables again all the buttons
            b.setIcon(null);//Deletes the current Icon
            b.setBackground(null);//Sets background to default
        }
        TURN = -1;//Because, at the end of ActionPerformed, it adds 1 to TURN
    }

    /**
     * This method is called from within the constructor to initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Pos01 = new javax.swing.JButton();
        Pos00 = new javax.swing.JButton();
        Pos02 = new javax.swing.JButton();
        Pos11 = new javax.swing.JButton();
        Pos10 = new javax.swing.JButton();
        Pos12 = new javax.swing.JButton();
        Pos21 = new javax.swing.JButton();
        Pos20 = new javax.swing.JButton();
        Pos22 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Tic-Tac-Toe");
        setLocation(new java.awt.Point(0, 0));

        Pos01.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ActionPerformed(evt);
            }
        });

        Pos00.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ActionPerformed(evt);
            }
        });

        Pos02.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ActionPerformed(evt);
            }
        });

        Pos11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ActionPerformed(evt);
            }
        });

        Pos10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ActionPerformed(evt);
            }
        });

        Pos12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ActionPerformed(evt);
            }
        });

        Pos21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ActionPerformed(evt);
            }
        });

        Pos20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ActionPerformed(evt);
            }
        });

        Pos22.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Pos00, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(Pos01, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(Pos02, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Pos10, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(Pos11, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(Pos12, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Pos20, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(Pos21, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(Pos22, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Pos00, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Pos01, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Pos02, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Pos10, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Pos11, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Pos12, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Pos20, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Pos21, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Pos22, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ActionPerformed
        if (Arrays.asList(Buttons).contains((JButton) evt.getSource())) {
            modify((JButton) evt.getSource());
        }
        TURN++;
    }//GEN-LAST:event_ActionPerformed

    private void modify(JButton b) {
        int x = Integer.parseInt(b.getName().substring(0, 1));
        int y = Integer.parseInt(b.getName().substring(1));
        b.setIcon((Icon) img[TURN%2]);
        game[x][y] = sudo[TURN%2];
        b.setEnabled(false);
        if (TURN > 3)win(x, y);
        if (TURN == 8)end();//In case of draw (which happens most of the time) restarts too

    }

    private void win(int x, int y) {
        int T = TURN % 2;
        if (abs(x - y) % 2 == 0 && x != 1) {
            /**
             * x|?|x
             * ?|?|?
             * x|?|x
             */
            if (game[x][y] == sudo[T] && game[(x + 1) % 3][y] == sudo[T] && game[(x + 2) % 3][y] == sudo[T]) {
                /**
                 * x|>|>
                 * ?|?|?
                 * ?|?|?
                 */
                markWin(x, y, (x + 1) % 3, y, (x + 2) % 3, y);
                end();
            } else if (game[x][y] == sudo[T] && game[x][(y + 1) % 3] == sudo[T] && game[x][(y + 2) % 3] == sudo[T]) {
                /**
                 * x|?|?
                 * v|?|?
                 * v|?|?
                 */
                markWin(x, y, x, (y + 1) % 3, x, (y + 2) % 3);
                end();
            }
            if (abs(x - y) == 0) {
                if (game[x][y] == sudo[T] && game[(x + 1) % 3][(y + 1) % 3] == sudo[T] && game[(x + 2) % 3][(y + 2) % 3] == sudo[T]) {
                    /**
                     * x|?|?
                     * ?|\|?
                     * ?|?|\
                     */
                    markWin(x, y, (x + 1) % 3, (y + 1) % 3, (x + 2) % 3, (y + 2) % 3);
                    end();
                }
            } else if (game[x][y] == sudo[T] && game[abs(x - 1) % 3][abs(y - 1) % 3] == sudo[T] && game[abs(x - 2) % 3][abs(y - 2) % 3] == sudo[T]) {
                /**
                 * ?|?|x
                 * ?|/|?
                 * /|?|?
                 */
                markWin(x, y, abs(x - 1) % 3, abs(y - 1) % 3, abs(x - 2) % 3, abs(y - 2) % 3);
                end();
            }

        } else if (abs(x - y) % 2 == 1) {
            /**
             * ?|x|?
             * x|?|x
             * ?|x|?
             */
            if (game[x][y] == sudo[T] && game[(x + 1) % 3][y] == sudo[T] && game[(x + 2) % 3][y] == sudo[T]) {
                /**
                 * <|x|>
                 * ?|?|?
                 * ?|?|?
                 */
                markWin(x, y, (x + 1) % 3, y, (x + 2) % 3, y);
                end();
            } else if (game[x][y] == sudo[T] && game[x][(y + 1) % 3] == sudo[T] && game[x][(y + 2) % 3] == sudo[T]) {
                /**
                 * ?|x|?
                 * ?|v|?
                 * ?|v|?
                 */
                markWin(x, y, x, (y + 1) % 3, x, (y + 2) % 3);
                end();
            }
        } else{
            /**
             * ?|?|?
             * ?|x|?
             * ?|?|?
             */
            if (game[1][0] == sudo[T] && game[1][1] == sudo[T] && game[1][2] == sudo[T]) {
                /**
                 * ?|?|?
                 * <|x|>
                 * ?|?|?
                 */
                markWin(1, 0, 1, 1, 1, 2);
                end();
            } else if (game[0][1] == sudo[T] && game[1][1] == sudo[T] && game[2][1] == sudo[T]) {
                /**
                 * ?|^|?
                 * ?|x|?
                 * ?|v|?
                 */
                markWin(0, 1, 1, 1, 2, 1);
                end();
            } else if (game[0][0] == sudo[T] && game[1][1] == sudo[T] && game[2][2] == sudo[T]) {
                /**
                 * \|?|?
                 * ?|x|?
                 * ?|?|\
                 */
                markWin(0, 0, 1, 1, 2, 2);
                end();
            } else if (game[2][0] == sudo[T] && game[1][1] == sudo[T] && game[0][2] == sudo[T]) {
                /**
                 * ?|?|/
                 * ?|x|?
                 * /|?|?
                 */
                markWin(2, 0, 1, 1, 0, 2);
                end();
            }
        }
    }

    private void markWin(int x1, int y1, int x2, int y2, int x3, int y3) {
        setWon(x1, y1);
        setWon(x2, y2);
        setWon(x3, y3);
    }

    private void setWon(int x, int y) {
        Buttons[3 * x + y].setBackground(Color.red);
        Buttons[3 * x + y].setOpaque(true);
    }

    private void end() {
        for (JButton b : Buttons) {
            b.setEnabled(false);
        }
        JDialog d = new Restart(this, true);
        d.setVisible(true);
        restart();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Map.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Map().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Pos00;
    private javax.swing.JButton Pos01;
    private javax.swing.JButton Pos02;
    private javax.swing.JButton Pos10;
    private javax.swing.JButton Pos11;
    private javax.swing.JButton Pos12;
    private javax.swing.JButton Pos20;
    private javax.swing.JButton Pos21;
    private javax.swing.JButton Pos22;
    // End of variables declaration//GEN-END:variables
}
